web3.js API
accesing through console

//creates instance of contract
const instance= new web3.eth.Contract((contract).abi,(string_ofaddress))
//to access a value  
const funds=await  instance.methods.(methodname/varname)().call()



receive/send function
any function that contains value should marked as payable

Object - The transaction object to send:
web3.eth.sendTransaction(transactionObject [, callback])
from : , to:   , value:(in wei)
optional gas,gas price

block info
//nonce -- number when combined with mixhash proofs that the block 
//went through PoW


0x6080604052348015600f57600080fd5b50604580601d6000396000f3fe
Instructions of initialazation  phase

60 80 60 40 52 34 80 15 60 0f 57 60 00 80 fd 5b 50 60 45 80 60 1d 60 00 39 60 00 f3 fe

// MEMORY

Memory[0x40] = 0x80  // Free memory pointer
Memory[0x00] =  code to copy

// how is Block Header Calculated
RLP (“recursive length prefix”) encoding is the main serialization format used in Ethereum,
and is used everywhere - for blocks, transactions, account state data and
wire protocol messages.

How header is encoded
https://ethereum.stackexchange.com/questions/67280/block-header-hash-calculation

Encoder
https://toolkit.abdk.consulting/ethereum#rlp

About RLP encoding
https://medium.com/coinmonks/data-structure-in-ethereum-episode-1-recursive-length-prefix-rlp-encoding-decoding-d1016832f919

Etherem Live view
http://ethviewer.live/


bits, bytes, words
https://www.youtube.com/watch?v=Weyv-V8xz0c

EVMs, and Bytecode
https://www.youtube.com/watch?v=RxL_1AfV7N4

Memory in computer:
https://www.youtube.com/watch?v=F0Ri2TpRBBg


//Calling function of contract
--Through instance of smart contract
const instance = awawit Faucet.deployed()
instance.(function)()
--Through contract signature
web3.eth.sendTransaction(({from: ,to:,data:,value:}))
data constists of function signature(keccak-256)

//modifiers
//pure,view
it indicates that the function will not elter 
the storage state


//external vs public
public can be used also within smart contract
if externall is used should specify .this but higher gas consumption will be causes



//memory
private -> can only be accesed within smart contract
internal -> can be accesible within smart contract and also derived smart contract
private and iternal will not be in faucet.abi(json file)/interface
public will be part of abi/part of interface and created getter automatically


//web3 storage
 web3.eth.getStorageAt("0x8403E7650B2e5c171489aC56B2fc550EE00b872a",0) --address of contract ,index
'0x0f01648faad551af1da6d6556f0e3c41b37b6055bad1  000a  07'

//mapping
key,value
prevent duplication of addresses